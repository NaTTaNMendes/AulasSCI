unit UnitTelaPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, DateUtils, StrUtils;

type
  TFormPrincipal = class(TForm)
    btnNmr1: TButton;
    btnNmr2: TButton;
    btnNmr3: TButton;
    btnNmr4: TButton;
    btnNmr5: TButton;
    btnNmr6: TButton;
    btnNmr7: TButton;
    btnNmr8: TButton;
    btnNmr9: TButton;
    btnNmr10: TButton;
    btnNmr11: TButton;
    btnNmr12: TButton;
    btnNmr131: TButton;
    btnNmr132: TButton;
    btnNmr14: TButton;
    btnNmr15: TButton;
    btnNmr16: TButton;
    btnNmr17: TButton;
    btnNmr18: TButton;
    procedure btnNmr1Click(Sender: TObject);
    procedure btnNmr2Click(Sender: TObject);
    procedure btnNmr3Click(Sender: TObject);
    procedure btnNmr4Click(Sender: TObject);
    procedure btnNmr5Click(Sender: TObject);
    procedure btnNmr6Click(Sender: TObject);
    procedure btnNmr7Click(Sender: TObject);
    procedure btnNmr8Click(Sender: TObject);
    procedure btnNmr9Click(Sender: TObject);
    procedure btnNmr10Click(Sender: TObject);
    procedure btnNmr11Click(Sender: TObject);
    procedure btnNmr12Click(Sender: TObject);
    procedure btnNmr131Click(Sender: TObject);
    procedure btnNmr132Click(Sender: TObject);
    procedure btnNmr14Click(Sender: TObject);
    procedure btnNmr15Click(Sender: TObject);
    procedure btnNmr16Click(Sender: TObject);
    procedure btnNmr17Click(Sender: TObject);
    procedure btnNmr18Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FormPrincipal: TFormPrincipal;

implementation

{$R *.dfm}

procedure TFormPrincipal.btnNmr10Click(Sender: TObject);
var
  wDataInformada: TDateTime;
  wDiaSemana: Integer;
  wDiasNaSemana: array [1..7] of String;
begin

  // Instanciando variáveis
  wDataInformada:= EncodeDate(2030, 06, 15);
  wDiasNaSemana[1]:= 'Domingo';
  wDiasNaSemana[2]:= 'Segunda-Feira';
  wDiasNaSemana[3]:= 'Terça-Feira';
  wDiasNaSemana[4]:= 'Quarta-Feira';
  wDiasNaSemana[5]:= 'Quinta-Feira';
  wDiasNaSemana[6]:= 'Sexta-Feira';
  wDiasNaSemana[7]:= 'Sábado';

  // Coleta o dia da semana
  wDiaSemana:= DayOfWeek(wDataInformada);

  // Retorna o dia para o usuário
  ShowMessage('Dia da semana: ' + wDiasNaSemana[wDiaSemana]);

end;

procedure TFormPrincipal.btnNmr11Click(Sender: TObject);
var
  wDataComparada: TDate;
  wAnoInicial: Integer;
  WAnoFinal: Integer;
  WDiferencaAnos: Integer;
  wI: Integer;
  wI2: Integer;
  wAnoAtual: Integer;
  wDiaMesRequisitado: Integer;
  wDiaSemanaRequisitado: Integer;
  wRetorno: String;
  wListaData: TStringList;
begin

  // Instanciando variáveis
  wAnoInicial:= 2000;
  wAnoFinal:= 2010;
  wDiaMesRequisitado:= 13;                          // Aqui é informado o dia do mês em que se deseja procurar
  wDiaSemanaRequisitado:= 5;                        // Aqui é informado o dia da semana que se deseja procurar (0 - Domingo, 1 -  Segunda, ..., 6 - Sábado)
  wDiferencaAnos:= WAnoFinal - wAnoInicial;
  wListaData:= TStringList.Create;

  // Encontra a quantidade de dias procurados naquelas determinadas datas do ano
  for wI := 0 to WDiferencaAnos do
     begin
       wAnoAtual:= wAnoInicial + wI;
       for wI2 := 1 to 12 do
          begin
            wDataComparada:= EncodeDate(wAnoAtual, wI2, wDiaMesRequisitado);
            if DayOfTheWeek(wDataComparada) = wDiaSemanaRequisitado then
               begin
                 wListaData.Add(DateToStr(wDataComparada));
               end;
          end;
     end;

  // Gera a String para o retorno
  for wI := 0 to wListaData.Count-1 do
     begin
       if wI = 0 then
          begin
            wRetorno:= wListaData[wI];
          end
       else
          begin
            wRetorno:= wRetorno + '  ' + wListaData[wI];
          end;
     end;
  wRetorno:= 'Quantidade de dias encontrados: ' + IntToStr(wListaData.Count)
             + #10 + #10 + 'Datas:' + #10 + #10 + wRetorno;

  // Retorna os dados para o usuário
  ShowMessage(wRetorno);

end;

procedure TFormPrincipal.btnNmr12Click(Sender: TObject);
var
  wTextoEntrada, wTextoSaida: String;
  wI: Integer;
begin

  // Instanciando variáveis
  wTextoEntrada:= 'SCI Sistemas Contábeis';
  wTextoSaida:= '';

  // inverte o texto
  for wI := Length(wTextoEntrada) downto 1 do
     begin
       wTextoSaida:= wTextoSaida + wTextoEntrada[wI];
     end;

  // Retorna os textos para o usuário
  ShowMessage('Texto original: ' + wTextoEntrada + #10
              + 'Texto invertido: ' + wTextoSaida);

end;

procedure TFormPrincipal.btnNmr131Click(Sender: TObject);
var
  wTextoInformado, wTextoSaida: String;
begin

  // Instanciando variáveis
  wTextoInformado:= 'Vou ficar grande';

  // Coloca todas as letras em upperCase
  wTextoSaida:= AnsiUpperCase(wTextoInformado);

  //Retorna para o usuário
  ShowMessage('Texto informado: ' + wTextoInformado
              + #10 + 'Texto em maiúsculas: ' + wTextoSaida);

end;

procedure TFormPrincipal.btnNmr132Click(Sender: TObject);
var
  wTextoInformado, wTextoSaida: String;
begin

   // Instanciando variáveis
   wTextoInformado:= 'VOU FICAR PEQUENO';

   // Coloca todas as letras em upperCase
   wTextoSaida:= AnsiLowerCase(wTextoInformado);

   //Retorna para o usuário
   ShowMessage('Texto informado: ' + wTextoInformado
               + #10 + 'Texto em minúsculas: ' + wTextoSaida);

end;

procedure TFormPrincipal.btnNmr14Click(Sender: TObject);
var
  wTexto: String;
  wTextoSaida: String;
  wI: Integer;
begin

  // Instanciando variáveis
  wTexto:= 'sci sistemas contábeis';

  // Transforma em maiúscula todas as letras após um espaço
  for wI := 1 to Length(wtexto) do
     begin
       if wI = 1 then
          begin
            wTextoSaida:= AnsiUpperCase(wTexto[wI]);
          end
       else if wTexto[wI - 1] = ' ' then
          begin
            wTextoSaida:= wTextoSaida + AnsiUpperCase(wTexto[wI]);
          end
       else
          begin
            wTextoSaida:= wTextoSaida + wTexto[wI];
          end;
     end;

  // Retorna os textos para o usuário
  ShowMessage('Texto informado: ' + wTexto + #10
              + 'Texto convetido: ' + wTextoSaida);

end;

procedure TFormPrincipal.btnNmr15Click(Sender: TObject);
var
  wTexto, wTextoMaiuscula: String;
  wQtdLetras: Integer;
  wQtdConsoantes: Integer;
  wQtdVogais: Integer;
  wI: Integer;
  wVogais : String;
  wConsoantes: String;
begin

  // Instanciando variáveis
  wTexto:= 'SCI Sistemas Contábeis é uma empresa de tecnologia';
  wTextoMaiuscula:= AnsiUpperCase(wTexto);
  wVogais:= 'AEIOUÁÉÍÓÚ';
  wConsoantes:= 'BCDFGHJKLMNPQRSTVWXYZ';

  // Coleta a quantidade de vogais e consoantes
  for wI := 1 to Length(wTextoMaiuscula) do
     begin
       if Pos(wTextoMaiuscula[wI], wVogais) > 0 then
          begin
            wQtdVogais:= wQtdVogais + 1;
          end;

       if Pos(wTextoMaiuscula[wI], wConsoantes) > 0 then
          begin
            wQtdConsoantes:= wQtdConsoantes + 1;
          end;
     end;

  // Calcula a quantidade de letras
  wQtdLetras:= wQtdVogais + wQtdConsoantes;

  // Retorna os dados para o usuário
  ShowMessage('Texto informado: ' + wTexto + #10
              + 'Quantidade de letras: ' + IntToStr(wQtdLetras)
              + #10 + 'Quantidade de vogais: ' + IntToStr(wQtdVogais)
              + #10 + 'Quantidade de consoantes: ' + IntToStr(wQtdConsoantes));

end;

procedure TFormPrincipal.btnNmr16Click(Sender: TObject);
var
  wTexto, wTextoMaiuscula: String;
  wQtdLetras: Integer;
  wI: Integer;
  wVogais: String;
  wConsoantes: String;
  wSaida: String;
begin

  // Instanciando variáveis
  wTexto:= 'SCI Sistemas Contábeis é uma empresa de tecnologia';
  wTextoMaiuscula:= AnsiUpperCase(wTexto);
  wVogais:= 'AEIOUÁÉÍÓÚ';
  wConsoantes:= 'BCDFGHJKLMNPQRSTVWXYZ';

  // Coleta a quantidade de letras
  for wI := 1 to Length(wTextoMaiuscula) do
     begin
       if (Pos(wTextoMaiuscula[wI], wVogais) > 0) or (Pos(wTextoMaiuscula[wI], wConsoantes) > 0) then
          begin
            wQtdLetras:= wQtdLetras + 1;
          end;
     end;

  // Retorna os dados para o usuário
  if wQtdLetras = 50 then
     begin
       wSaida:= 'A frase chegou ao limite de letras';
     end
  else if wQtdLetras > 50 then
     begin
       wSaida:= 'A frase não será aceita pois superou o limite de caracteres.';
     end
  else
     begin
       wSaida:= 'Texto aprovado';
     end;
  ShowMessage('Texto informado: ' + wTexto + #10 + IntToStr(wQtdLetras) + #10 + wSaida);

end;

procedure TFormPrincipal.btnNmr17Click(Sender: TObject);
var
  wListaCedulas: array [0..6] of Integer;
  wListaSaidaCedulas: array [0..6] of Integer;
  wValor, wValorSaida, wI: Integer;
  wTextoSaida: String;
begin

  // Instanciando variáveis
  wListaCedulas[0]:= 1;
  wListaCedulas[1]:= 2;
  wListaCedulas[2]:= 5;
  wListaCedulas[3]:= 10;
  wListaCedulas[4]:= 20;
  wListaCedulas[5]:= 50;
  wListaCedulas[6]:= 100;
  wValor:= 993;
  wValorSaida:= wValor;

  // Calcula a quantidade de cédulas
  for wI := 6 downto 0 do
     begin
       wListaSaidaCedulas[wI]:= trunc(wValor / wListaCedulas[wI]);
       wValor:= wValor - wListaSaidaCedulas[wI] * wListaCedulas[wI];
       wTextoSaida:= wTextoSaida + IntToStr(wListaSaidaCedulas[wI]) + ' notas de ' + IntToStr(wListaCedulas[wI]) + #10;
     end;

  // Retorna os valores para o usuário
  ShowMessage('Valor informado: ' + IntToStr(wValorSaida) + #10 + #10 + wTextoSaida);

end;

procedure TFormPrincipal.btnNmr18Click(Sender: TObject);
var
  w101a900: array [0..8] of String;
  w20a90: array [0..7] of String;
  w10a19: array [0..9] of String;
  w0a9: array [0..9] of String;
  wEntrada: String;
  wSaida: String;
  wNumeroTemp, wI, wI2: Integer;
begin

  // Instanciando variáveis
  w0a9[1]:= 'um';
  w0a9[2]:= 'dois';
  w0a9[3]:= 'três';
  w0a9[4]:= 'quatro';
  w0a9[5]:= 'cinco';
  w0a9[6]:= 'seis';
  w0a9[7]:= 'sete';
  w0a9[8]:= 'oito';
  w0a9[9]:= 'nove';
  w10a19[0]:= 'dez';
  w10a19[1]:= 'onze';
  w10a19[2]:= 'doze';
  w10a19[3]:= 'treze';
  w10a19[4]:= 'quatorze';
  w10a19[5]:= 'quinze';
  w10a19[6]:= 'dezesseis';
  w10a19[7]:= 'dezesete';
  w10a19[8]:= 'dezoito';
  w10a19[9]:= 'dezenove';
  w20a90[0]:= 'vinte';
  w20a90[1]:= 'trinta';
  w20a90[2]:= 'quarenta';
  w20a90[3]:= 'cinquenta';
  w20a90[4]:= 'sessenta';
  w20a90[5]:= 'setenta';
  w20a90[6]:= 'oitenta';
  w20a90[7]:= 'noventa';
  w101a900[0]:= 'cento';
  w101a900[1]:= 'duzentos';
  w101a900[2]:= 'trezentos';
  w101a900[3]:= 'quatrocentos';
  w101a900[4]:= 'quinhentos';
  w101a900[5]:= 'seiscentos';
  w101a900[6]:= 'setecentos';
  w101a900[7]:= 'oitocentos';
  w101a900[8]:= 'novecentos';
  wEntrada:= '1';

  if Length(wEntrada) = 3 then
     begin
       for wI := 1 to Length(wEntrada) do
           begin
             wNumeroTemp:= StrToInt(wEntrada[wI]);
             if (wI = 1) then
                begin
                  wSaida:= wSaida + w101a900[wNumeroTemp - 1] + ' ';
                end
             else if (wI = 2) then
                begin
                  if wNumeroTemp = 1 then
                     begin
                       for wI2 := 0 to 9 do
                          begin
                            if StrToInt(wEntrada[wI + 1]) = wI2 then
                               begin
                                 wSaida:= wSaida + ' e ' + w10a19[wI2];
                               end;
                          end;
                     end
                  else
                     begin
                       if wNumeroTemp <> 0 then
                          begin
                            wSaida:= wSaida + ' e ' + w20a90[wNumeroTemp - 2];
                          end
                     end;
                end
             else if (wI = 3) and (StrToInt(wEntrada[wI - 1]) <> 1) then
                begin
                  if wNumeroTemp <> 0 then
                     begin
                       wSaida:= wSaida + ' e ' + w0a9[wNumeroTemp];
                     end;
                end;
           end;
     end
  else if Length(wEntrada) = 2 then
     begin
       for wI := 1 to Length(wEntrada) do
           begin
             wNumeroTemp:= StrToInt(wEntrada[wI]);
             if (wI = 1) then
                begin
                  if wNumeroTemp = 1 then
                     begin
                       for wI2 := 0 to 9 do
                          begin
                            if StrToInt(wEntrada[wI + 1]) = wI2 then
                               begin
                                 wSaida:= wSaida + w10a19[wI2];
                               end;
                          end;
                     end
                  else
                     begin
                       if wNumeroTemp = 0 then
                          begin
                            wSaida:= wSaida + w20a90[wNumeroTemp];
                          end
                       else
                          begin
                            wSaida:= wSaida + w20a90[wNumeroTemp - 2];
                          end;
                     end;
                end
             else if (wI = 2) and (StrToInt(wEntrada[wI - 1]) <> 1) then
                begin
                  if wNumeroTemp <> 0 then
                     begin
                       wSaida:= wSaida + ' e ' + w0a9[wNumeroTemp];
                     end;
                end;
           end;
     end
  else if Length(wEntrada) = 1 then
     begin
       wNumeroTemp:= StrToInt(wEntrada);
       wSaida:= w0a9[wNumeroTemp];
     end;

  if wEntrada = '100' then
     begin
       wSaida:= 'Cem';
     end
  else if wEntrada = '0' then
     begin
       wSaida:= 'Zero';
     end;

  ShowMessage('Número informado: ' + wEntrada + #10 + 'Número escrito: ' + wSaida);

end;

procedure TFormPrincipal.btnNmr1Click(Sender: TObject);
var
  wMaiorNumero: Integer;
  wNumero1: Integer;
  wNumero2: Integer;
  wNumero3: Integer;
begin

  // Instanciando variáveis
  wNumero1:= 51;
  wNumero2:= 73;
  wNumero3:= -512;

  // Encontra o maior número
  wMaiorNumero:= wNumero1;
  if wNumero2 > wMaiorNumero then
     begin
       wMaiorNumero:= wNumero2;
     end;
  if wNumero3 > wMaiorNumero then
     begin
       wMaiorNumero:= wNumero3;
     end;

  // Retorna o maior para o usuário
  showMessage('O maior número entre ' + IntToStr(wNumero1) + ', '
              + IntToStr(wNumero2) + ' e '  + IntToStr(wNumero3)
              + ' é: ' + IntToStr(wMaiorNumero));

end;

procedure TFormPrincipal.btnNmr2Click(Sender: TObject);
var
  wTemporario: Integer;
  wTemporario2: Integer;
  wNumero1: Integer;
  wNumero2: Integer;
  wNumero3: Integer;
begin

  // Instanciando variáveis
  wNumero1:= 1002;
  wNumero2:= 0;
  wNumero3:= 7649;

  // Verifica se o primeiro valor é maior que o segundo
  if (wNumero2 < wNumero1) then
     begin
       wTemporario:= wNumero1;
       wNumero1:= wNumero2;
       wNumero2:= wTemporario;
     end;

  // Verifica se o terceiro valor é menor que o primeiro
  if (wNumero3 < wNumero1) then
     begin
       wTemporario:= wNumero1;
       wTemporario2:= wNumero2;
       wNumero1:= wNumero3;
       wNumero2:= wTemporario;
       wNumero3:= wTemporario2;
     end;

  // Verifica se o terceiro valor é menor que o segundo
  if (wNumero3 < wNumero2) then
     begin
       wTemporario:= wNumero3;
       wNumero3:= wNumero2;
       wNumero2:= wTemporario;
     end;

  // Retorna para o usuário
  ShowMessage(IntToStr(wNumero1) + ', ' + IntToStr(wNumero2) + ', ' + IntToStr(wNumero3));

  end;

procedure TFormPrincipal.btnNmr3Click(Sender: TObject);
var
  wStringList: TStringList;
  wMaiorNumero: Integer;
  wI: Integer;
begin

  // Instanciando variáveis
  wStringList:= TstringList.Create;
  wStringList.Add('2342');
  wStringList.Add('5');
  wStringList.Add('2041');
  wMaiorNumero:= StrToInt(wStringList[0]);

  // Encontra o maior número
  for wI := 0 to wStringList.Count-1 do
     begin
       if StrToInt(wStringList[wI]) > wMaiorNumero then
         begin
          wMaiorNumero:= StrToInt(wStringList[wI]);
         end;
     end;

  // Retorna o maior número para o usuário
  ShowMessage('O maior número é: ' + IntToStr(wMaiorNumero));

end;

procedure TFormPrincipal.btnNmr4Click(Sender: TObject);
var
  wVetor: array[0..9] of Integer;
  wMenorNumero: Integer;
  wMenorQuantidade: Integer;
  wI: Integer;
begin

  // Instanciando variáveis
  wVetor[0]:= 2;
  wVetor[1]:= 2;
  wVetor[2]:= 1;
  wVetor[3]:= 0;
  wVetor[4]:= 2;
  wVetor[5]:= 2;
  wVetor[6]:= 2;
  wVetor[7]:= 2;
  wVetor[8]:= 2;
  wVetor[9]:= 4;
  wMenorNumero:= wVetor[0];
  wMenorQuantidade:= 0;

  // Encontra o menor número e a quantidade de vezes que ele aparece
  for wI := 0 to 9 do
     begin
       if wVetor[wI] < wMenorNumero then
         begin
          wMenorNumero:= wVetor[wI];
          wMenorQuantidade:= 1;
         end
       else if wVetor[wI] = wMenorNumero then
         begin
          wMenorQuantidade:= wMenorQuantidade + 1;
         end;
     end;

  // Retorna o menor número e a quantidade para o usuário
  ShowMessage('O menor número é: ' + IntToStr(wMenorNumero)
              + ' e os menores números foram lidos '
              + IntToStr(wMenorQuantidade) + ' vezes');

end;

procedure TFormPrincipal.btnNmr5Click(Sender: TObject);
var
  wStringList: TStringList;
  wMaiorNumero: Integer;
  wMenorNumero: Integer;
  wI: Integer;
  wMedia: Currency;
  wTotal: Integer;
begin

  // Instanciando variáveis
  wStringList:= TStringList.Create;
  wStringList.Add('5');
  wStringList.Add('3');
  wStringList.Add('1');
  wStringList.Add('7');
  wStringList.Add('9');
  wStringList.Add('12');
  wStringList.Add('12');
  wStringList.Add('12');
  wStringList.Add('12');
  wStringList.Add('12');
  wMenorNumero:= StrToInt(wStringList[0]);
  wMaiorNumero:= StrToInt(wStringList[0]);

  // Encontra o maior e o menor número
  for wI := 0 to wStringList.Count-1 do
     begin
       if StrToInt(wStringList[wI]) > wMaiorNumero then
         begin
           wMaiorNumero:= StrToInt(wStringList[wI]);
         end
       else if StrToInt(wStringList[wI]) < wMenorNumero then
         begin
           wMenorNumero:= StrToInt(wStringList[wI]);
         end;
       wTotal:= wTotal + StrToInt(wStringList[wI]);
     end;

  // Calcula a média dos números sem o maior e o menor
  wMedia:= (wTotal - (wMaiorNumero + wMenorNumero)) / (wStringList.Count - 2);

  // Retorna os dados para o usuário
  ShowMessage('Maior número: ' + IntToStr(wMaiorNumero) + #10 
              + 'Menor número: ' + IntToStr(wMenorNumero) + #10 
              + 'Média dos valores: ' + CurrToStr(wMedia));
    
end;

procedure TFormPrincipal.btnNmr6Click(Sender: TObject);
var
  wNumero: Integer;
  wString: String;
begin

  // Instanciando variáveis
  wNumero:= 550;
  wString:= IntToStr(wNumero);

  // Retorna os algarismos para o usuário
  ShowMessage('O número: ' + IntToStr(wNumero)
              + ' possui os seguintes algarismos: '
              + wString[1] + ', ' + wString[2] + ', ' + wString[3]);

end;

procedure TFormPrincipal.btnNmr7Click(Sender: TObject);
var
  wValorHora: Currency;
  wValorHoraExtra: Currency;
  wQtdHorasNormais: Integer;
  wQtdHorasExtras: Integer;
  wSalarioAnual: Currency;
begin

  // Instanciando variáveis
  wValorHora:= 15.0;
  wValorHoraExtra:= 30.0;
  wQtdHorasNormais:= 2000;
  wQtdHorasExtras:= 300;

  // Calculando o salário anual
  wSalarioAnual:= (wValorHora * wQtdHorasNormais) + (wValorHoraExtra * wQtdHorasExtras);

  // Retorna o salário anual para o usuário
  ShowMessage('Salário anual: ' + CurrToStrF(wSalarioAnual, ffCurrency, 2));
  
end;

procedure TFormPrincipal.btnNmr8Click(Sender: TObject);
var
  wValorHora: Currency;
  wValorHoraExtra: Currency;
  wQtdHorasNormais: Integer;
  wQtdHorasExtras: Integer;
  wSalarioAnual: Currency;
  wAdicionalHorasExtras: Currency;
  wAdicionalExtra: Currency;
  wQtdHorasExtrasBonus: Integer;
  wQtdHorasNormaisBonus: Integer;
  wAdicionalNormal: Currency;
  wImpostoAnual: Currency;
  wSalarioTotal: Currency;
  wImpostoPago: Currency;
  wTotalHoraExtra: Currency;
begin

  // Instanciando variáveis
  wValorHora:= 15.0;
  wValorHoraExtra:= 30.0;
  wQtdHorasNormais:= 2000;
  wQtdHorasExtras:= 300;
  wAdicionalExtra:= 0.10;
  wQtdHorasExtrasBonus:= 100;
  wQtdHorasNormaisBonus:= 1500;
  wAdicionalNormal:= 2.0;
  wImpostoAnual:= 18.0;
  wAdicionalHorasExtras:= 0;
  wSalarioTotal:= 0;
  wImpostoPago:= 0;
  wTotalHoraExtra:= wValorHoraExtra * wQtdHorasExtras;

  // Calcula o valor adicional caso a quantidade de horas extras passe a meta
  if wQtdHorasExtras > wQtdHorasExtrasBonus then
     begin
       wAdicionalHorasExtras:= wTotalHoraExtra * wAdicionalExtra;
     end;

  // Calcula o valor recebido em horas extras
  wTotalHoraExtra:= wTotalHoraExtra + wAdicionalHorasExtras;

  // Calcula o adicional por hora normal e o imposto do usuário
  if wQtdHorasNormais > wQtdHorasNormaisBonus then
     begin
       wValorHora:= wValorHora + wAdicionalNormal;
       wSalarioAnual:= (wValorHora * wQtdHorasNormais);
       wImpostoPago:= (wSalarioAnual * (wImpostoAnual/100));
     end;

  // Calcula o valor do salário anual e total do funcionário
  wSalarioAnual:= (wValorHora * wQtdHorasNormais);
  wSalarioTotal:= (wSalarioAnual + wTotalHoraExtra) - wImpostoPago;

  // Retorna os dados para o usuário
  ShowMessage('Salário anual normal: ' + CurrToStrF(wSalarioAnual, ffCurrency, 2) + #10
              + 'Valor horas extras: ' + CurrToStrF(wTotalHoraExtra, ffCurrency, 2) + #10
              + 'Valor imposto pago: '  + CurrToStrF(wImpostoPago, ffCurrency, 2) + #10
              + 'Salário total: ' + CurrToStrF(wSalarioTotal, ffCurrency, 2));

end;

procedure TFormPrincipal.btnNmr9Click(Sender: TObject);
var
  wDataInformada: TDateTime;
  wDias: Integer;
begin

  // Instanciando variáveis
  wDataInformada:= EncodeDateTime(2022, 05, 26, 0, 0, 0, 0);

  // Calcula entre a data atual e a informada pelo usuário
  wDias:= DaysBetween(Today, wDataInformada);

  // Retorna a diferença para o usuário
  ShowMessage('Diferença de dias: ' + IntToStr(wDias));

end;

end.
